// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Places.Models;

namespace Places.Migrations
{
    [DbContext(typeof(PlacesContext))]
    partial class PlacesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Places.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Places.Models.CityPerson", b =>
                {
                    b.Property<int>("CityPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("CityPersonId");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId");

                    b.ToTable("CityPerson");
                });

            modelBuilder.Entity("Places.Models.Landmark", b =>
                {
                    b.Property<int>("LandmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("LandmarkId");

                    b.HasIndex("CityId");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("Places.Models.LandmarkPerson", b =>
                {
                    b.Property<int>("LandmarkPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LandmarkId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("LandmarkPersonId");

                    b.HasIndex("LandmarkId");

                    b.HasIndex("PersonId");

                    b.ToTable("LandmarkPerson");
                });

            modelBuilder.Entity("Places.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Places.Models.CityPerson", b =>
                {
                    b.HasOne("Places.Models.City", "City")
                        .WithMany("JoinEntities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Places.Models.Person", "Person")
                        .WithMany("JoinCityPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Places.Models.Landmark", b =>
                {
                    b.HasOne("Places.Models.City", "city")
                        .WithMany("Landmarks")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("Places.Models.LandmarkPerson", b =>
                {
                    b.HasOne("Places.Models.Landmark", "Landmark")
                        .WithMany("JoinEntities")
                        .HasForeignKey("LandmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Places.Models.Person", "Person")
                        .WithMany("JoinLandmarkPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landmark");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Places.Models.City", b =>
                {
                    b.Navigation("JoinEntities");

                    b.Navigation("Landmarks");
                });

            modelBuilder.Entity("Places.Models.Landmark", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Places.Models.Person", b =>
                {
                    b.Navigation("JoinCityPerson");

                    b.Navigation("JoinLandmarkPerson");
                });
#pragma warning restore 612, 618
        }
    }
}
